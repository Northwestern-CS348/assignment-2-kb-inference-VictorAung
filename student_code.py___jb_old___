import read, copy
from util import *
from logical_classes import *

verbose = 0

class KnowledgeBase(object):
    def __init__(self, facts=[], rules=[]):
        self.facts = facts
        self.rules = rules
        self.ie = InferenceEngine()

    def __repr__(self):
        return 'KnowledgeBase({!r}, {!r})'.format(self.facts, self.rules)

    def __str__(self):
        string = "Knowledge Base: \n"
        string += "\n".join((str(fact) for fact in self.facts)) + "\n"
        string += "\n".join((str(rule) for rule in self.rules))
        return string

    def _get_fact(self, fact):
        """INTERNAL USE ONLY
        Get the fact in the KB that is the same as the fact argument

        Args:
            fact (Fact): Fact we're searching for

        Returns:
            Fact: matching fact
        """
        for kbfact in self.facts:
            if fact == kbfact:
                return kbfact

    def _get_rule(self, rule):
        """INTERNAL USE ONLY
        Get the rule in the KB that is the same as the rule argument

        Args:
            rule (Rule): Rule we're searching for

        Returns:
            Rule: matching rule
        """
        for kbrule in self.rules:
            if rule == kbrule:
                return kbrule

    def kb_add(self, fact_rule):
        """Add a fact or rule to the KB
        Args:
            fact_rule (Fact|Rule) - the fact or rule to be added
        Returns:
            None
        """
        printv("Adding {!r}", 1, verbose, [fact_rule])
        if isinstance(fact_rule, Fact):
            if fact_rule not in self.facts:
                self.facts.append(fact_rule)
                for rule in self.rules:
                    self.ie.fc_infer(fact_rule, rule, self)
            else:
                if fact_rule.supported_by:
                    ind = self.facts.index(fact_rule)
                    for f in fact_rule.supported_by:
                        self.facts[ind].supported_by.append(f)
                else:
                    ind = self.facts.index(fact_rule)
                    self.facts[ind].asserted = True
        elif isinstance(fact_rule, Rule):
            if fact_rule not in self.rules:
                self.rules.append(fact_rule)
                for fact in self.facts:
                    self.ie.fc_infer(fact, fact_rule, self)
            else:
                if fact_rule.supported_by:
                    ind = self.rules.index(fact_rule)
                    for f in fact_rule.supported_by:
                        self.rules[ind].supported_by.append(f)
                else:
                    ind = self.rules.index(fact_rule)
                    self.rules[ind].asserted = True

    def kb_assert(self, fact_rule):
        """Assert a fact or rule into the KB

        Args:
            fact_rule (Fact or Rule): Fact or Rule we're asserting
        """
        printv("Asserting {!r}", 0, verbose, [fact_rule])
        self.kb_add(fact_rule)

    def kb_ask(self, fact):
        """Ask if a fact is in the KB

        Args:
            fact (Fact) - Statement to be asked (will be converted into a Fact)

        Returns:
            listof Bindings|False - list of Bindings if result found, False otherwise
        """
        print("Asking {!r}".format(fact))
        if factq(fact):
            f = Fact(fact.statement)
            bindings_lst = ListOfBindings()
            # ask matched facts
            for fact in self.facts:
                binding = match(f.statement, fact.statement)
                if binding:
                    bindings_lst.add_bindings(binding, [fact])

            return bindings_lst if bindings_lst.list_of_bindings else []

        else:
            print("Invalid ask:", fact.statement)
            return []

    def kb_retract(self, fact):
        """Retract a fact from the KB

        Args:
            fact (Fact) - Fact to be retracted

        Returns:
            None
        """
        printv("Retracting {!r}", 0, verbose, [fact])
        ####################################################
        # Student code goes here
        #when removing fact, you also need to remove all facts and rules that were Inferred
        # but only if those inferred facts were not supported by other facts
        #An asserted fact should only be removed if it is unsupported.
        #An asserted rule should never be removed.
        #
        #
        # If fact is not asserted, do nothing because it will be inferred againself.
        # If fact is asserted, we must continue
        # if fact is asserted, but also is supported,
        # we just need to change asserted to False
        # if fact is asserted but not supported, we have to remove the fact
        #and remove everything that has been inferred from that
        if fact not in self.facts: #if fact is not found
            return
        elif fact.name == 'fact': #fact is found
            factIndex = self.facts.index(fact)
            foundFact = self.facts[factIndex]
            #if found fact is not asserted, do nothing
            if foundFact.asserted == False:
                return
            if foundFact.supported_by: #if foundfact is supported by anything, we can leave it but we have to remove its assertion
                if foundFact.asserted:
                    foundFact.asserted = False
                    return
            if foundFact.supported_by == []: #if found fact is not supported by anything, we must remove it and all inferred facts
                for supportedFact in foundFact.supports_facts:
                    supportedFactIndex = self.facts.index(supportedFact)
                    supportedFact = self.facts[supportedFactIndex]
                    if foundFact in supportedFact.supported_by:
                        supportedFact.supported_by.remove(foundFact)
                    #if len(supportedFact.supported_by) < 2: #if only supported by fact that we're removing
                    #    supportedFact.supported_by = []
                        self.kb_retract_helper(supportedFact) #we need to recur to apply the same logic to this supportedFact
                for supportedRule in foundFact.supports_rules:
                    if foundFact in supportedRule.supported_by:
                        supportedRule.supported_by.remove(foundFact)
                    #    if len(supportedRule.supported_by) < 2:
                    #        supportedRule.supported_by = []
                        self.kb_retract_helper(supportedRule)
                self.facts.remove(fact) #finally, we can remove the original fact

    def kb_retract_helper(self, fact_or_rule): #we need a helper function to take in rules and not change the way things are asserted

        #if not fact_or_rule.asserted:
        if fact_or_rule.name == 'rule' and fact_or_rule in self.rules:
            ruleIndex = self.facts.index(fact_or_rule)
            foundRule = self.facts[ruleIndex]
            if foundRule.supported_by == []:
                ruleIndex = self.rules.index(fact_or_rule)
                foundRule = self.rules[ruleIndex]
                for supportedFact in foundRule.supports_facts:
                    supportedFactIndex = self.facts.index(supportedFact)
                    supportedFact = self.facts[supportedFactIndex]
                    if foundRule in supportedFact.supported_by:
                        supportedFact.supported_by.remove(foundRule)
                        self.kb_retract_helper(supportedFact) #we need to recur to apply the same logic to this supportedFact
                for supportedRule in foundRule.supports_rules:
                    if foundRule in supportedRule.supported_by:
                        supportedRule.supported_by.remove(foundRule)
                        self.kb_retract_helper(supportedRule)
                self.facts.remove(fact_or_rule) #finally, we can remove the original fact
        elif fact_or_rule in self.facts:
            factIndex = self.facts.index(fact_or_rule)
            foundFact = self.facts[factIndex]
            if foundFact.supported_by == []: #if found fact is not supported by anything, we must remove it and all inferred facts
                for supportedFact in foundFact.supports_facts:
                    supportedFactIndex = self.facts.index(supportedFact)
                    supportedFact = self.facts[supportedFactIndex]
                    if foundFact in supportedFact.supported_by:
                        supportedFact.supported_by.remove(foundFact)
                    #if len(supportedFact.supported_by) < 2: #if only supported by fact that we're removing
                    #    supportedFact.supported_by = []
                        self.kb_retract_helper(supportedFact) #we need to recur to apply the same logic to this supportedFact
                for supportedRule in foundFact.supports_rules:
                    if foundFact in supportedRule.supported_by:
                        supportedRule.supported_by.remove(foundFact)
                    #    if len(supportedRule.supported_by) < 2:
                    #        supportedRule.supported_by = []
                        self.kb_retract_helper(supportedRule)
                self.facts.remove(fact_or_rule) #finally, we can remove the original fact







class InferenceEngine(object):
    def fc_infer(self, fact, rule, kb):
        """Forward-chaining to infer new facts and rules

        Args:
            fact (Fact) - A fact from the KnowledgeBase
            rule (Rule) - A rule from the KnowledgeBase
            kb (KnowledgeBase) - A KnowledgeBase

        Returns:
            Nothing
        """
        printv('Attempting to infer from {!r} and {!r} => {!r}', 1, verbose,
            [fact.statement, rule.lhs, rule.rhs])
        ####################################################
        # Student code goes here
        #Infer is used to infer new rules. First use match to create possible bindings
        #instantiate binds variable
        #supported by list shows how an inferred rule or fact is created
        potBinding = match(fact.statement, rule.lhs[0]) #check first statement in rule
        listofBindings = []
        if potBinding and len(rule.lhs) == 1: #if there is a binding AND the LHS = 1 item, implement the fact as is
            for statement in rule.lhs[1:]:
                newStatement = instantiate(statement, potBinding)
                listofBindings.append(newStatement)
            rhsStatement = instantiate(rule.rhs, potBinding)
            newFact = Fact(rhsStatement, [[fact, rule]])
            rule.supports_facts.append(newFact)
            fact.supports_facts.append(newFact)
            kb.kb_assert(newFact)
        elif potBinding:      #if there is a binding and the LHS > 1 item, then the rest of the LHS needs to be implemented
            for statement in rule.lhs[1:]:
                newStatement = instantiate(statement, potBinding)
                listofBindings.append(newStatement)
            rhsStatement = instantiate(rule.rhs, potBinding)
            newRule = Rule([listofBindings, rhsStatement], [[fact, rule]])
            rule.supports_facts.append(newRule)
            fact.supports_facts.append(newRule)
            kb.kb_assert(newRule)
